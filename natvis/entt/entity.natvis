<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="entt::basic_registry&lt;*&gt;">
		<Intrinsic Name="pools_size" Expression="pools.packed.first_base::value.size()"/>
		<Intrinsic Name="vars_size" Expression="vars.packed.first_base::value.size()"/>
		<Intrinsic Name="to_entity" Expression="*((entity_traits::entity_type *)&amp;entity) &amp; entity_traits::entity_mask">
			<Parameter Name="entity" Type="entity_traits::value_type &amp;"/>
		</Intrinsic>
		<DisplayString>{{ size={ entities.size() } }}</DisplayString>
		<Expand>
			<Synthetic Name="[entities]">
				<DisplayString>{ entities.size() }</DisplayString>
				<Expand>
					<IndexListItems>
						<Size>entities.size()</Size>
						<ValueNode Condition="to_entity(entities[$i]) == $i">entities[$i]</ValueNode>
						<ValueNode>null</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[destroyed]" ExcludeView="simple">
				<DisplayString>{ to_entity(free_list) != entity_traits::entity_mask }</DisplayString>
				<Expand>
					<CustomListItems>
						<Variable Name="it" InitialValue="to_entity(free_list)" />
						<Variable Name="cnt" InitialValue="0" />
						<Loop>
							<Break Condition="it == entity_traits::entity_mask"/>
							<Item Name="[{ cnt }]">it</Item>
							<Exec>it = to_entity(entities[it])</Exec>
							<Exec>++cnt</Exec>
						</Loop>
					</CustomListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[pools]">
				<DisplayString>{ pools_size() }</DisplayString>
				<Expand>
					<IndexListItems ExcludeView="simple">
						<Size>pools_size()</Size>
						<ValueNode>*pools.packed.first_base::value[$i].element.second</ValueNode>
					</IndexListItems>
					<IndexListItems IncludeView="simple">
						<Size>pools_size()</Size>
						<ValueNode>*pools.packed.first_base::value[$i].element.second,view(simple)</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Item Name="[groups]" ExcludeView="simple">groups.size()</Item>
			<Synthetic Name="[vars]">
				<DisplayString>{ vars_size() }</DisplayString>
				<Expand>
					<IndexListItems>
						<Size>vars_size()</Size>
						<ValueNode>vars.packed.first_base::value[$i].element.second</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>
	<Type Name="entt::basic_sparse_set&lt;*&gt;">
		<DisplayString>{{ size={ packed.size() }, type={ info->alias,na } }}</DisplayString>
		<Expand>
			<Item Name="[capacity]" ExcludeView="simple">packed.capacity()</Item>
			<Item Name="[policy]" ExcludeView="simple">mode,en</Item>
			<IndexListItems>
				<Size>packed.size()</Size>
				<ValueNode Condition="*((entity_traits::entity_type *)&amp;packed[$i]) &lt; ~entity_traits::entity_mask">
					packed[$i]
				</ValueNode>
				<ValueNode>tombstone</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>
	<Type Name="entt::basic_storage&lt;*&gt;">
		<DisplayString>{{ size={ base_type::packed.size() }, type={ base_type::info->alias,na } }}</DisplayString>
		<Expand>
			<Item Name="[capacity]" Optional="true" ExcludeView="simple">packed.first_base::value.capacity() * comp_traits::page_size</Item>
			<Item Name="[page size]" Optional="true" ExcludeView="simple">comp_traits::page_size</Item>
			<Item Name="[base]" ExcludeView="simple">(base_type*)this,nand</Item>
			<Item Name="[base]" IncludeView="simple">(base_type*)this,view(simple)nand</Item>
			<!-- having SFINAE-like techniques in natvis is priceless :) -->
			<IndexListItems Condition="packed.first_base::value.size() != 0" Optional="true">
				<Size>base_type::packed.size()</Size>
				<ValueNode Condition="*((base_type::entity_traits::entity_type *)&amp;base_type::packed[$i]) &lt; ~base_type::entity_traits::entity_mask">
					packed.first_base::value[$i / comp_traits::page_size][$i &amp; (comp_traits::page_size - 1)]
				</ValueNode>
				<ValueNode>tombstone</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>
	<Type Name="entt::null_t">
		<DisplayString>&lt;null&gt;</DisplayString>
	</Type>
	<Type Name="entt::tombstone_t">
		<DisplayString>&lt;tombstone&gt;</DisplayString>
	</Type>
</AutoVisualizer>
